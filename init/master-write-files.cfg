#cloud-config

write_files:
  - path: /opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-agent.json
    content: |
      {
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log",
                  "timestamp_format": "%Y-%m-%d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/amazon/ssm/errors.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/amazon/ssm/errors.log",
                  "timestamp_format": "%Y-%m-%d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/audit/audit.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/audit/audit.log"
                },
                {
                  "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                },
                {
                  "file_path": "/var/log/boot.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/boot.log"
                },
                {
                  "file_path": "/var/log/cloud-init-output.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/cloud-init-output.log"
                },
                {
                  "file_path": "/var/log/cloud-init.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/cloud-init.log",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/cron",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/cron",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/dmesg",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/dmesg"
                },
                {
                  "file_path": "/var/log/grubby_prune_debug",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/grubby_prune_debug"
                },
                {
                  "file_path": "/var/log/maillog",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/maillog",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/messages",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/messages",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/secure",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/secure",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/yum.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/yum.log",
                  "timestamp_format": "%b %d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/amazon/efs/mount.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/amazon/efs/mount.log",
                  "timestamp_format": "%Y-%m-%d %H:%M:%S"
                },
                {
                  "file_path": "/var/log/jenkins/jenkins.log",
                  "log_group_name": "${master_logs}",
                  "log_stream_name": "{instance_id}/var/log/jenkins/jenkins.log",
                  "timestamp_format": "%d %b %Y %H:%M:%S",
                  "multi_line_start_pattern": "{timestamp_format}"
                }
              ]
            }
          }
        }
      }
    permissions: "000644"
    owner: root
    group: root
  - path: /opt/cloudwatch-busy-executors.sh
    content: |
      #!/bin/bash

      for i in {1..3};
      do
        AGENT_ASG="$(aws autoscaling describe-auto-scaling-groups --region ${aws_region} | jq -r '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith("${application}-agent")) | .AutoScalingGroupName')"

        BUILD_ACTIVE_QUEUE_VALUE1="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.busyExecutors')"
        BUILD_ACTIVE_QUEUE_VALUE2="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/jqs-monitoring/api/json' | jq -r '.buildQueue.numberOfJobs')"
        BUILD_ACTIVE_QUEUE_VALUE=$(( $BUILD_ACTIVE_QUEUE_VALUE1 + $BUILD_ACTIVE_QUEUE_VALUE2 ))
        
        TOTAL_EXECUTORS="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.totalExecutors')"
        AVAILABLE_EXECUTORS=$(( $TOTAL_EXECUTORS - $BUILD_ACTIVE_QUEUE_VALUE ))
        
        aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name AvailableExecutors --value $AVAILABLE_EXECUTORS --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}

        sleep 15
      done
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/cloudwatch-idle-executors.sh
    content: |
      #!/bin/bash

      for i in {1..3};
      do
        AGENT_ASG="$(aws autoscaling describe-auto-scaling-groups --region ${aws_region} | jq -r '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith("${application}-agent")) | .AutoScalingGroupName')"

        BUILD_ACTIVE_QUEUE_VALUE1="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.busyExecutors')"
        BUILD_ACTIVE_QUEUE_VALUE2="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/jqs-monitoring/api/json' | jq -r '.buildQueue.numberOfJobs')"
        BUILD_ACTIVE_QUEUE_VALUE=$(( $BUILD_ACTIVE_QUEUE_VALUE1 + $BUILD_ACTIVE_QUEUE_VALUE2 ))
        
        TOTAL_EXECUTORS="$(curl -s -m 60 -u 'admin:APIKEY' 'http://localhost:8080/computer/api/json' | jq -r '.totalExecutors')"
        
        if [ $TOTAL_EXECUTORS -gt ${executors_min} ] && [ $BUILD_ACTIVE_QUEUE_VALUE -eq 0 ]; then
          aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name IdleExecutors --value 0 --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}
        else
          aws cloudwatch put-metric-data --namespace JenkinsBuildActiveQueue --metric-name IdleExecutors --value 1 --dimensions AutoScalingGroupName=$AGENT_ASG --unit Count --region ${aws_region}
        fi

        sleep 15
      done
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/wait_for_setup_done.sh
    content: |
      #!/bin/bash
      if [ -f "/var/lib/jenkins/api_key.txt" ]; then
        export AUTH=$(cat /var/lib/jenkins/api_key.txt)
      else
        export AUTH=$(cat /var/lib/jenkins/secrets/initialAdminPassword)
      fi
      until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$AUTH" http://localhost:8080/cli/);
      do
          printf ".";
          sleep 1;
      done
    permissions: "000700"
    owner: root
    group: root
  - path: /opt/api_key.sh
    content: |
      #!/bin/bash

      if [ ! -f "/var/lib/jenkins/api_key.txt" ]; then
          CRUMB=$(curl -c cookies.txt -s http://localhost:8080/crumbIssuer/api/json --user 'admin:${admin_password}' | jq -r .crumb)
          API_KEY=$(curl -b cookies.txt -s -X POST http://localhost:8080/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken --user 'admin:${admin_password}' --data newTokenName=agent-token -H "Jenkins-Crumb: $CRUMB" | jq -r .data.tokenValue)
          
          echo $API_KEY > /var/lib/jenkins/api_key.txt
          aws ssm put-parameter --name "${api_ssm_parameter}" --value "$(cat /var/lib/jenkins/api_key.txt)" --type "SecureString" --overwrite --region ${aws_region}
      fi

      sed -i -e "s@APIKEY@$(cat /var/lib/jenkins/api_key.txt)@" /opt/cloudwatch-busy-executors.sh
      sed -i -e "s@APIKEY@$(cat /var/lib/jenkins/api_key.txt)@" /opt/cloudwatch-idle-executors.sh
    permissions: "000700"
    owner: root
    group: root
  - path: /etc/cron.d/cloudwatch-busy-executors
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
      MAILTO=root
      HOME=/
      * * * * * root /opt/cloudwatch-busy-executors.sh
    permissions: "000600"
    owner: root
    group: root
  - path: /etc/cron.d/cloudwatch-idle-executors
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
      MAILTO=root
      HOME=/
      * * * * * root /opt/cloudwatch-idle-executors.sh
    permissions: "000600"
    owner: root
    group: root




